name: CI/CD Docker

# 1. Quand déclencher ?
on:
  push:
    branches: [ main ]       # À chaque push sur la branche main
  pull_request:
    branches: [ main ]       # À chaque PR ciblant main

# 2. Variables d'environnement globales
env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/mon-image

jobs:
  # ────────────────────────────
  # Job 1 : Build & Test
  # ────────────────────────────
  build-test:
    name: 🛠 Build & Test
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Setup (Node/Python/etc. si nécessaire)
      #    --> À adapter selon votre stack. Exemple Node.js :
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Install & Test
      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  # ────────────────────────────
  # Job 2 : Docker Build & Push
  # ────────────────────────────
  docker-build-push:
    name: 🐳 Docker Build & Push
    needs: build-test           # ne s’exécute qu’après succès du build-test
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout (encore)  
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Connexion à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Build de l’image Docker
      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ env.IMAGE_NAME }}:latest \
            --tag ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            .

      # 4. Push de l’image
      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
